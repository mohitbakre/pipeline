    # docker-compose.yml
    version: '3.8'

    services:
      # Your Flask application (for local testing/development)
      # This is separate from the one deployed on Render, but uses the same image
      app:
        build: ./d_pipeline # Build the Docker image from your d_pipeline directory
        ports:
          - "8080:8080"
        environment:
          # Customize the greeting for your local app
          GREETING_TARGET: "Local Docker User"
        # Optional: if you want to run app.py directly without Gunicorn for debugging
        # command: python app.py
        # volumes:
        #   - ./d_pipeline:/app # Mount local code for live changes (optional)

      # Prometheus service
      prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        ports:
          - "9090:9090"
        volumes:
          - ./prometheus.yml:/etc/prometheus/prometheus.yml # Mount Prometheus config
          - prometheus_data:/prometheus # Persistent storage for Prometheus data
        command:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
        depends_on:
          - app # Prometheus depends on the app to be available (for local scraping if enabled)

      # Grafana service
      grafana:
        image: grafana/grafana:latest
        container_name: grafana
        ports:
          - "3000:3000"
        volumes:
          - grafana_data:/var/lib/grafana # Persistent storage for Grafana data
        environment:
          # Set admin user and password for Grafana (change for production!)
          - GF_SECURITY_ADMIN_USER=admin
          - GF_SECURITY_ADMIN_PASSWORD=admin
        depends_on:
          - prometheus # Grafana depends on Prometheus

    volumes:
      prometheus_data:
      grafana_data:
